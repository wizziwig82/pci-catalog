use serde::{Deserialize, Serialize};
use thiserror::Error; // Using thiserror for cleaner error definitions

/// Standard error structure for Tauri command results.
#[derive(Debug, Serialize, Deserialize, Clone, Error)]
pub enum CommandError {
    #[error("Database Error: {0}")]
    Database(String),

    #[error("Storage Error (R2): {0}")]
    Storage(String),

    #[error("File System Error: {0}")]
    FileSystem(String),

    #[error("Transcoding Error: {0}")]
    Transcoding(String),

    #[error("Metadata Error: {0}")]
    Metadata(String),

    #[error("Validation Error: {0}")]
    Validation(String),

    #[error("Configuration Error: {0}")]
    Configuration(String),

    #[error("Keychain Error: {0}")]
    Keychain(String),

    #[error("Not Found: {0}")]
    NotFound(String),

    #[error("Operation Failed: {0}")]
    OperationFailed(String), // Generic failure

    #[error("Unexpected Error: {0}")]
    Unexpected(String), // For truly unexpected cases
}

// Helper macro for simple String conversion
macro_rules! impl_from_string_for_command_error {
    ($variant:ident) => {
        impl From<String> for CommandError {
            fn from(msg: String) -> Self {
                CommandError::$variant(msg)
            }
        }
        impl From<&str> for CommandError {
            fn from(msg: &str) -> Self {
                CommandError::$variant(msg.to_string())
            }
        }
    };
}

// Example: Convert generic string errors to OperationFailed
// Note: Specific From implementations below are preferred for typed errors.
// impl_from_string_for_command_error!(OperationFailed);


// --- Specific Error Type Conversions ---

impl From<mongodb::error::Error> for CommandError {
    fn from(err: mongodb::error::Error) -> Self {
        // Provide more context based on the error kind if possible
        CommandError::Database(format!("{}", err))
    }
}

// Assuming aws_sdk_s3::Error is complex, convert based on its display or specific kinds
impl<E: std::error::Error + Send + Sync + 'static> From<aws_sdk_s3::error::SdkError<E>> for CommandError {
     fn from(err: aws_sdk_s3::error::SdkError<E>) -> Self {
         // Extract more specific details if needed, otherwise use the display format
         CommandError::Storage(format!("{}", err))
     }
 }


impl From<std::io::Error> for CommandError {
    fn from(err: std::io::Error) -> Self {
        CommandError::FileSystem(format!("{}", err))
    }
}

impl From<serde_json::Error> for CommandError {
    fn from(err: serde_json::Error) -> Self {
        CommandError::Unexpected(format!("JSON serialization/deserialization error: {}", err))
    }
}

impl From<keyring::Error> for CommandError {
    fn from(err: keyring::Error) -> Self {
        // Check for specific keyring errors like NoEntry
        if matches!(err, keyring::Error::NoEntry) {
             CommandError::NotFound("Credential not found in keychain.".to_string())
        } else {
             CommandError::Keychain(format!("{}", err))
        }
    }
}

// Add From implementations for other relevant error types as needed
// e.g., crate::audio::transcoding::TranscodingError

// Allow converting CommandError to a simple String for cases where the frontend
// might still expect a basic string error (though using the structured error is better).
// Consider removing this if the frontend fully adapts to the structured error.
impl From<CommandError> for String {
    fn from(err: CommandError) -> Self {
        err.to_string() // Use the message generated by thiserror::Error
    }
}